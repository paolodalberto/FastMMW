/* 
   Copyright 2011 Paolo D'Alberto, Marco Bodrato, and Alexandru
   Nicolau

   This file is part of the Fast Matrix Multiply library (FMM).
      
   FMM is free software: you can redistribute it and/or modify it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.

   FMM is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General
   Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with FMM.  If not, see
   <http://www.gnu.org/licenses/>.

*/
/************************************************************
 *
 * This the core example for purpose measure. With the right macro
 * defined, I can test any MM algorithm.
 * 
 *
 *
 *
 */

#define GETTIME
#include <architecture.h>
#include <mat-operands.h>
#include <mat-mulkernels.h>
#include <mat-addkernels.h>
#include <string.h>

#include <stdio.h>
#include <stdlib.h>


#ifdef CLBLAS
#include <clAmdBlas.h>
#endif
#ifdef CLBLAS
  extern int gpus[2];
  extern int ngpus;
#endif



#define ADDINTERVAL 5
#define MULINTERVAL 20

#include <omp.h>

#include <stdio.h>
//#include <scaling.h>

static int echo =1;

extern int debug;

#define MAXMAT 6

extern void mm_leaf_computation(DEF(C),DEF(A),DEF(B));

int main() {
  double time_mul;
  double time_add, ops,mops_add,mops_add_2,mops_mul;
  double time_add_2;
  char d[100];
  int M;
  int parallel=0;

#ifdef SINGLE_PRECISION
  S_TAddOperands computation[4];
#elif DOUBLE_PRECISION
  D_TAddOperands computation[4];
#elif SINGLE_COMPLEX
  C_TAddOperands computation[4];
#elif DOUBLE_COMPLEX
  Z_TAddOperands computation[4];
#endif


  Matrix c[MAXMAT];
  MatrixComputation m[4] = {
#ifdef SINGLE_PRECISION
    gpuGEMMS,gpuGEMMS,gpuGEMMS,gpuGEMMS
#elif DOUBLE_PRECISION
    gpuGEMMD,gpuGEMMD,gpuGEMMD,gpuGEMMD
#elif SINGLE_COMPLEX
    gpuGEMMC,gpuGEMMC,gpuGEMMC,gpuGEMMC
#elif DOUBLE_COMPLEX
    gpuGEMMZ,gpuGEMMZ,gpuGEMMZ,gpuGEMMZ
#endif
  };
  
  int mask=0;
  
  /*
   TIME;
   C0 += A*B;
   C1 += A*B;
   C2 += A*B;
   C3 += A*B;
   TIME;
  */

  
  { // beta initialization
    int i=0;
    
    for (i=0;i<MAXMAT;i++){ 
#if(SINGLE_COMPLEX || DOUBLE_COMPLEX)
      c[i].beta=1.0+0*I;
      printf("B[%e+i%e]\n", creal(c[i].beta),cimag(c[i].beta));
#else
      c[i].beta=1.0;
      printf("B[%e]\n", (double)c[i].beta);
#endif
      c[i].gpu=-1;
    }
  }
  

  printf("Size %d float %d double %d complex %d z-complex %d cpu_set_t %d \n", \
	 sizeof(Mat), sizeof(float),sizeof(double), sizeof(float complex) , sizeof(double complex),
	 sizeof(cpu_set_t));
  
  printf("Size:\n");
  scanf("%d", &M);
  printf(" size of the matrix element %d\n", sizeof(Mat));
  printf(" You selected the following problem \n");

  { // beta initialization
    int i=0;
    
    for (i=0;i<MAXMAT;i++){
      c[i].m = c[i].n = c[i].M = c[i].N = M;
      c[i].trans = 'n';
      printf("      A %d x %d gpu %d\n",c[i].m,c[i].n,c[i].gpu);
    }
  }


   
  printf("Creation ...\n");


  { // beta initialization
    int i=0;
    for (i=0;i<MAXMAT;i++){
      c[i].data = (Mat *) CALLOC(c[i]);
    }
  }


	
  printf("Initialization ...\n");
  
  { // beta initialization
    int i=0;
    for (i=0;i<MAXMAT;i++){
      randomInitialization(c[i],rand(),rand());
    }
  }
  
  
  
#ifdef CLBLAS
  set_platform_and_devices(1);
#endif

  printf("schedule 0 1 2 3 \n");
  scanf("%d %d %d %d", &c[2].gpu,&c[3].gpu, &c[4].gpu,&c[5].gpu);

  
  
  
  {
    int i;
    int sizes[4] =  {      16580608,  16580608,   3956940,     4148964};
		      
    for (i=0;i<4;i++){
      int j = i+2;
      printf("GPU %d MEM %dMB size %dMB \n", c[j].gpu, sizes[c[j].gpu], (sizeof(Mat)*3*c[j].M*c[j].N)/(1024));
      if (c[j].gpu>=0 && c[j].gpu<=3 && sizeof(Mat)*3*c[j].M*c[j].N/(1024) > sizes[c[j].gpu]) {
	printf("\t change algorithm GPU %d  \n", c[j].gpu);
#ifdef SINGLE_PRECISION
	m[i] = s_wm;
#elif DOUBLE_PRECISION
	m[i] = d_wm;
#elif SINGLE_COMPLEX
	m[i] = c_wm;
#elif DOUBLE_COMPLEX
	m[i] = z_wm;
#endif
	
      } else if (c[j].gpu==-2) {gpus[0] =2; gpus[1] = 3; } 
	

      computation[i].pi=2*i;
      computation[i].m = m[i];
      computation[i].c=c[j];
      computation[i].a=c[0];
      computation[i].b=c[1];
    }
  }

  printf("Parallelism?\n");
  scanf("%d",&parallel);
  printf("Entyered %d\n", parallel);
  


  
  if (parallel) {
    int i; 
    for(i=0;i<4;i++){
      computation[i].pi=0;
    }
    
    TIMING_COLD(					\
		{ MatrixComputations(computation,4); }	\
		, time_mul,MULINTERVAL );
		
    for(i=0;i<4;i++){
      computation[i].pi=2*i;
    }

  } else {
    
    TIMING_COLD(							\
		{							\
		  printf("%d\n",c[2].gpu); CMC(c[2], =, c[0], m[0], c[1]); \
		  printf("%d\n",c[3].gpu); CMC(c[3], =, c[0], m[1], c[1]); \
		  printf("%d\n",c[4].gpu); CMC(c[4], =, c[0], m[2], c[1]); \
		  printf("%d\n",c[5].gpu); CMC(c[5], =, c[0], m[3], c[1]); \
		},							\
		time_mul,MULINTERVAL					\
									);
  }
    
  if (echo) printf(" Time Cold %e \n", time_mul);
  ops = 4*((double)2*c[0].M)*((double)c[0].N*((double)c[0].M));
  printf(" MUL OPS %e", ops);if (echo) printf("\n");
  mops_mul=(ops/time_mul)/(double)1000000000;
  printf(" %s OPS %e GFLOPS COLD %e", "INT", ops, mops_mul);if (echo) printf("\n");
  

  if (parallel) {
    
    TIMING_ITER(					\
		{ MatrixComputations(computation,4); }	\
		, time_mul,MULINTERVAL,mask );
    
    
  } else {
    TIMING_ITER(						\
		{						\
		  CMC(c[2], =, c[0], m[0], c[1]);		\
		  CMC(c[3], =, c[0], m[1], c[1]);		\
		  CMC(c[4], =, c[0], m[2], c[1]);		\
		  CMC(c[5], =, c[0], m[3], c[1]);		\
		},time_mul,MULINTERVAL, mask);
  }

  if (echo) printf(" Time HOT %e \n", time_mul);
  ops = 4*((double)2*c[0].M)*((double)c[0].N*((double)c[0].M));
  printf(" MUL OPS %e", ops);if (echo) printf("\n");
  mops_mul=(ops/time_mul)/(double)1000000000;
  printf(" %s OPS %e GFLOPS HOT  %e", "INT", ops, mops_mul);if (echo) printf("\n");


  { // beta initialization
    int i=0;
    for (i=0;i<MAXMAT;i++){
      FREE(c[i].data);
    }
  }


#ifdef CLBLAS
  release_blas_context();
#endif
  
  return 0;
}
