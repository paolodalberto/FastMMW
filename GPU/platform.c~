/* ************************************************************************
 * Copyright 2013 Advanced Micro Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ************************************************************************/

#ifndef NUM_THREADS
#define NUM_THREADS 4
#endif
#include <gpuCompute.h>

  
#if(SINGLE_PRECISION)
#define DATATYPE cl_float
static const DATATYPE            alpha_zero = 0.0;  
static const DATATYPE            alpha_one = 1.0;  
static const DATATYPE            beta  = 1.0;
#elif(DOUBLE_PRECISION)
#define DATATYPE cl_double
static const DATATYPE            alpha_zero = 0.0;  
static const DATATYPE            alpha_one = 1.0;  
static const DATATYPE            beta  = 1.0;
#elif(SINGLE_COMPLEX)
#define DATATYPE FloatComplex
static const DATATYPE            alpha_zero = { 0.0, 0.0};  
static const DATATYPE            alpha_one =  {1.0, 1.1} ;  
static const DATATYPE            beta  = {1.0, 1.0 };
#elif(DOUBLE_COMPLEX)
#define DATATYPE DoubleComplex
static const DATATYPE            alpha_zero = { 0.0, 0.0};  
static const DATATYPE            alpha_one =  {1.0, 1.1} ;  
static const DATATYPE            beta  = {1.0, 1.0 };
#endif


#if(AMDCLBLAS)
#if(COLUMN_MAJOR)
static const clAmdBlasOrder     order  = clAmdBlasColumnMajor;
#elif(ROW_MAJOR)
static const clAmdBlasOrder     order  = clAmdBlasRowMajor;
#endif

static const clAmdBlasTranspose transA   = clAmdBlasTrans;
static const clAmdBlasTranspose notransA = clAmdBlasNoTrans;
#else
#if(COLUMN_MAJOR)
static const int     order  = CLBlastLayoutColumnMajor,;
#elif(ROW_MAJOR)
static const int     order  = CLBlastLayoutRowMajor;
#endif

static const int notransA = CLBlastTransposeNo;
static const int transA   = CLBlastTransposeYes;

#endif



char *prettyPrintClStatus(cl_int status );

static int DEBUG=0;  
static int DEBUG2=0;  

/* ********************************************************
 *
 * platform and devices are common to all applications.
 *
 */ 


DeviceBookmark bookmarks[DEVICES];

cl_uint platformCount;
cl_platform_id *platforms;
cl_context *ctxs;
int platform=0;

cl_device_id device[DEVICES];
cl_context_properties props[3] = { CL_CONTEXT_PLATFORM, 0, 0 };
cl_context ctx = 0;
cl_uint ndevices;


/* gpus = 0 in platform 1  is the only one I can use*/ 
int ngpus=4;
int gpus[4] = {0,1,2,3};
//                         Elle       Elle     Fiji         Fiji    


char *_names[DEVICES] =  { "fiji", "fiji", "ellesmere", "ellesmere" }; 
int   _sizes[DEVICES] =  {   3956940,     4148964,      16580608,  16580608};

/* *********************
 * We activate the platform we want and collect the set of devices availables
 *
 */ 


int  set_platform_and_devices(int platform) {
  char* info;
  size_t infoSize;
  const char* attributeNames[5] = { "Name", "Vendor",
				    "Version", "Profile", "Extensions" };
  const cl_platform_info attributeTypes[5] = { CL_PLATFORM_NAME, CL_PLATFORM_VENDOR,
					       CL_PLATFORM_VERSION, CL_PLATFORM_PROFILE, CL_PLATFORM_EXTENSIONS };
  const int attributeCount = sizeof(attributeNames) / sizeof(char*);
  int i,j,d,k;
  cl_int err;
  int counts=0;
  

  /* we have platforms */
  
  clGetPlatformIDs(0, NULL, &platformCount);
  platforms = (cl_platform_id*) malloc(sizeof(cl_platform_id) * platformCount);
  ctxs =      (cl_context *)    malloc(sizeof(cl_context) * platformCount);
  clGetPlatformIDs(platformCount, platforms, NULL);
  

  
  d=0;
  for (i = 0; i < platformCount; i++) {
   
    printf("\n %d %d. Platform \n", i,platform);
    for (j = 0; j < attributeCount; j++) {
      // get platform attribute value size
      clGetPlatformInfo(platforms[i], attributeTypes[j], 0, NULL, &infoSize);
      info = (char*) malloc(infoSize);
      
      // get platform attribute value
      clGetPlatformInfo(platforms[i], attributeTypes[j], infoSize, info, NULL);
      
      printf("  %d.%d %-11s: %s\n", i+1, j+1, attributeNames[j], info);
      free(info);
    }

    // devices per platform
    
    err = clGetDeviceIDs(platforms[i], CL_DEVICE_TYPE_GPU, DEVICES, device + d, &k);

    if (err != CL_SUCCESS) {
      checkErrors(err,"clGetDeviceIDs",10);
      printf( "clGetDeviceIDs() failed with %d\n", err );
      return 1;
    } else {
      
      deviceInformation( device+d,k);
      printf("N of GPUS %d \n",ndevices);
      // for each device print critical attributes
      
    }

    // context per platform
    props[1] = (cl_context_properties)platforms[i];
    ctxs[i] = clCreateContext(props, k , device+d, NULL, NULL, &err);
    if (err != CL_SUCCESS) {
      checkErrors(err,"create context",158);
      printf( "clCreateContext() failed with %d\n", err );
      return 1;
    }
        

    for ( int m=0; m<k; m++) {
      {
	cl_ulong buf_ulong;
	size_t valueSize;
	// print device memory size
	clGetDeviceInfo(device[m], CL_DEVICE_GLOBAL_MEM_SIZE,sizeof(buf_ulong), &buf_ulong, NULL);
	_sizes[counts] = buf_ulong/1024;
	
	printf(" %d.%d Global Memory: %lu KB %d\n", j, 5, buf_ulong/(1024),_sizes[counts]);
	
	// We change the buffer size so we can dynamic algorithm
	
      
	bookmarks[counts].platform = platforms+i;
	bookmarks[counts].ctx = ctxs +i;
	bookmarks[counts].device =  device + d+m;
	bookmarks[counts].i =  counts ;
	
	clGetDeviceInfo(device[m], CL_DEVICE_NAME, 0, NULL, &valueSize);
	bookmarks[counts].name = (char*) malloc(valueSize);
	clGetDeviceInfo(device[m], CL_DEVICE_NAME, valueSize, bookmarks[counts].name, NULL);
	bookmarks[counts].size = _sizes[counts] ;
	
	  
	counts +=1;
      }
    }

    d += k;
    
  }
  
  
  

  //err = clAmdBlasSetup();
  if (err != CL_SUCCESS) {
    printf("clblasSetup() failed with %d\n", err);

    for (int m=0; m<platformCount; m++) 
      clReleaseContext(ctxs[m]);
    free(platforms);
    free(ctxs);
    
    return 1;
  }
  
  return 0;
}


void release_blas_context() {

  //clAmdBlasTeardown();
  
  //  clReleaseContext(ctx);
  for (int m=0; m<platformCount; m++) 
    clReleaseContext(ctxs[m]);
  free(platforms);
  free(ctxs);
  

}

int  shapes(int start, int end, int M,
	    int l,int *weights,  int *size, int *indexes) {
  
  int i;
  int n = 0;

  int parts = 0;
  
  for (i=start; i<l && i<= end; i++,parts++)
    n += weights[i]; // number of partitions.
  
  for (i=start; i<l && i<= end; i++)
    size[i] = M*weights[i]/n;
  
  if (M%n!= 0 )
    size[i-1] = M*weights[i-1]/n+ (M%n);
  
  indexes[start] =0 ;
  for (i=start+1; i<l && i<= end; i++)
    indexes[i] = indexes[i-1] + size[i-1];
  
  if (DEBUG) {
    printf("M mod n = %d M=%d n=%d \n",M%n,M,n);
    for (i=start; i<l && i<= end;i++)
      printf("s[%d] = %d and i[%d] = %d \n",i,size[i],i,indexes[i]);
  }

  
  return parts;
}








void *basic_mul_computation_gpugemm(void *arg) {  
  cl_int err;
  cl_event events[6];
  Mat tempalpha, tempbeta;  // in complex format these are double complex or float complex 
  DATATYPE alpha, beta;     // to use OpenCL these can be DoubleComplex and FloatComplex 
  GPUData *d =  (GPUData *)arg;
  int skipc = (d->C.beta == _zero)?0:1;
  
  if (DEBUG2) {
    printf("GPU %d \n",d->C.gpu);
    deviceName( &(d->id),d->C.gpu);
  }
  
  if (DEBUG) {
    size_t r;
    cl_int e = clGetMemObjectInfo (d->bufA,CL_MEM_SIZE,sizeof(r),&r,NULL);
    printf("GPU %d BUF A size %d %d\n",d->C.gpu,r,e);
    checkErrors(e, "read A",0);
    e = clGetMemObjectInfo (d->bufB,CL_MEM_SIZE,sizeof(r),&r,NULL);
    printf("GPU %d BUF B size %d %d \n",d->C.gpu,r,e);
    checkErrors(e, "read B",0);
    e = clGetMemObjectInfo (d->bufC,CL_MEM_SIZE,sizeof(r),&r,NULL);
    printf("GPU %d BUF C size %d %d \n",d->C.gpu,r,e);
    checkErrors(e, "read C",0);
    printf("GPU %d       A %d x %d %d x %d %c- \n",d->C.gpu,d->A.m, d->A.n,d->A.M,d->A.N, d->A.trans);
    printf("GPU %d       B %d x %d %d x %d %c- \n",d->C.gpu,d->B.m, d->B.n,d->B.M,d->B.N, d->B.trans);
    printf("GPU %d s%d  C %d x %d %d x %d %c- \n",d->C.gpu,skipc,d->C.m, d->C.n,d->C.M,d->C.N, d->C.trans);
  }
  
#if(ROW_MAJOR)
  if (DEBUG) printf("GPU %d Sending Row Data \n",d->C.gpu);
  if ((d->skip)&1) { ROWAAR(d->A,d->queue, d->bufA,&events[0],0);}
  if (DEBUG) printf("GPU %d Sending Row Data \n",d->C.gpu);
  if ((d->skip)&2) { ROWAAR(d->B,d->queue, d->bufB,&events[1],1);}
  if (DEBUG) printf("GPU %d Sending Row Data \n",d->C.gpu);
  if (skipc && (d->skip)&4) { ROWAAR(d->C,d->queue, d->bufC,&events[2],2);}
#elif(COLUMN_MAJOR)
  if (DEBUG) printf("GPU %d Sending Col Data \n",d->C.gpu);
  if ((d->skip)&1) {COLAAR(d->A,d->queue, d->bufA,&events[0],0);}
  if ((d->skip)&2) {COLAAR(d->B,d->queue, d->bufB,&events[1],1); }
  if (skipc && (d->skip)&4) {COLAAR(d->C,d->queue, d->bufC,&events[2],2);}
#endif

  
  
  if (DEBUG) printf("GPU %d Wait for read kernel \n",d->C.gpu);
  err = clWaitForEvents((skipc==0)?2:3, events);
  if (err !=CL_SUCCESS) { 
    checkErrors(err, "write  failed",0);
    if (DEBUG) printf("GPU %d Wait for read kernel \n",d->C.gpu);
    
  }
  if (DEBUG) printf("GPU %d Sent Data \n",d->C.gpu);
    
  

#if(SINGLE_COMPLEX || DOUBLE_COMPLEX)  
  alpha.s[0]= creal(d->A.beta*d->B.beta);
  alpha.s[1]= cimag(d->A.beta*d->B.beta);
  beta.s[0] = creal(d->C.beta);
  beta.s[1] = cimag(d->C.beta);
  if (DEBUG) {
    printf("GPU %d Sending  kernel \n",d->C.gpu);
    printf("GPU %d  Alpha %f %f Beta %f %f \n",d->C.gpu, alpha.s[0], alpha.s[1], beta.s[0], beta.s[1]);
    
  }
#else
  alpha = d->A.beta*d->B.beta;
  beta  = d->C.beta;
  if (DEBUG) {
    printf("GPU %d Sending  kernel \n",d->C.gpu);
    printf("GPU %d  Alpha %f  Beta  %f \n",d->C.gpu, alpha,  beta);
    
  }
#endif

#if(ROW_MAJOR)
  err = GEMMCL(
	       order, // 1  
	       (d->A.trans =='n')?notransA:transA,  //2 
	       (d->B.trans =='n')?notransA:transA,
	       d->A.m, //4 
	       d->B.n, //5
	       d->A.n, //6
	       alpha, //7
	       d->bufA,
	       0, // 8,9
	       d->A.n, //10
	       d->bufB,
	       0, //11 12
	       d->B.n, //13
	       beta, // 14
	       d->bufC,
	       0,// 15 16
	       d->C.n, //17
	       &(d->queue),
	       events+3);
#elif(COLUMN_MAJOR)
  err = GEMMCL(order, // 1  
	       (d->A.trans =='n')?notransA:transA,  //2 
	       (d->B.trans =='n')?notransA:transA,  //3
	       d->A.m, //4 
	       d->B.n, //5
	       d->A.n, //6
	       alpha, //7
	       d->bufA, 0, // 8,9
	       d->A.m, //10 
	       d->bufB,0, //11 12
	       d->B.m, // 13
	       beta, // 14
	       d->bufC, 0,// 15 16
	       d->C.m, 
	       &(d->queue),
	       events+3);
#endif
  
  if (DEBUG) printf("GPU %d Sent kernel \n",d->C.gpu);
  if (err != CL_SUCCESS) {
    size_t r;
    cl_int e = clGetMemObjectInfo (d->bufA,CL_MEM_SIZE,sizeof(r),&r,NULL);
    printf("GPU %d BUF A size %d %d %d \n",d->C.gpu,r,(d->A.m)*(d->A.n)*sizeof(Mat),e);
    checkErrors(e, "read A",0);
    e = clGetMemObjectInfo (d->bufB,CL_MEM_SIZE,sizeof(r),&r,NULL);
    printf("GPU %d BUF B size %d %d %d \n",d->C.gpu,r,d->B.m*d->B.n*sizeof(Mat),e);
    checkErrors(e, "read B",0);
    e = clGetMemObjectInfo (d->bufC,CL_MEM_SIZE,sizeof(r),&r,NULL);
    printf("GPU %d BUF C size %d %d %d \n",d->C.gpu,r,d->C.m*d->C.n*sizeof(Mat),e);
    
#if(ROW_MAJOR)
    printf("GPU %d Row Major and order %d %d %d \n",d->C.gpu,order,
	   (d->A.trans =='n')?notransA:transA,(d->B.trans =='n')?notransA:transA);
#elif(COLUMN_MAJOR)
    printf("GPU %d Column Major and order %d %d %d ",d->C.gpu,order,
	   (d->A.trans =='n')?notransA:transA,
	   (d->B.trans =='n')?notransA:transA);
#endif
    
    checkErrors(e, "read C",0);
    printf("GPU %d     A m=%d x n=%d from %d x %d gpu %d\n",d->C.gpu,d->A.m, d->A.n,d->A.M,d->A.N,d->A.gpu);
    printf("GPU %d     B m=%d x n=%d from %d x %d gpu %d\n",d->C.gpu,d->B.m, d->B.n,d->B.M,d->B.N,d->B.gpu);
    printf("GPU %d     C m=%d x n=%d from %d x %d gpu %d\n",d->C.gpu,d->C.m, d->C.n,d->C.M,d->C.N,d->C.gpu);
    printf("GPU %d     A.n %d   B.n %d   C.n %d \n",d->C.gpu,d->A.n, d->B.n,d->C.n);
    printf("GPU %d     A.m %d   B.m %d   C.m %d \n",d->C.gpu,d->A.m, d->B.m,d->C.m);
    printf("GPU %d   A.m m=%d B.n n=%d B.m k=%d \n",d->C.gpu,d->A.m, d->B.n,d->B.m);
    printf("GPU %d clblasSgemmEx() failed with %d\n",d->C.gpu, err);
    printf("GPU %d %s\n",d->C.gpu, prettyPrintClStatus(err));
    printf("GPU %d \n",d->C.gpu);
    deviceInformation( &(d->id),1);
    checkErrors(err, "gemm  failed",0);
    d->result = 1;
    return 1;
  }

  /* Wait for calculations to be finished. */
  //if (DEBUG) printf("Wait for kernel \n");
  //err = clWaitForEvents(1, &event);

#if(ROW_MAJOR)
  if ((d->skip)&8) {ROWWWR(d->C,d->queue, d->bufC,events+3,events+4);}

#elif(COLUMN_MAJOR)
  if ((d->skip)&8) {COLWWR(d->C,d->queue, d->bufC,event+3,events+4);}
#endif
  if (DEBUG)  printf("GPU %d read result \n",d->C.gpu);
  /* Fetch results of calculations from GPU memory. */

  /* Wait for calculations to be finished. */
  if (DEBUG) printf("GPU %d Wait for Write kernel \n",d->C.gpu);
  err = clWaitForEvents(1, events+4);

  
  if (err != CL_SUCCESS) {
    printf("GPU %d clblasSgemmEx() failed with %d\n",d->C.gpu, err);
    d->result = 1;
    return  1;
  }

  if (DEBUG) printf("GPU %d done \n",d->C.gpu);
  d->result =0;
  return 0; 

}                                                                   


int PARALLEL = 0;

static inline int TEMPLATE(DEF(C),DEF(A), DEF(B),int ngpus, int *gpus) {
  INITIALIZE;			
  
  if (DEBUG) {
    printf("GPU %d  TEMPLATE size of the matrix element %d\n",gpus[0], sizeof(A.beta));
    printf("GPU %d  You selected the following problem \n",gpus[0]);
    printf("GPU %d       A %d x %d %f\n",gpus[0], A.m,A.n, A.beta);
    printf("GPU %d       B %d x %d %f \n",gpus[0],B.m,B.n,B.beta);
    printf("GPU %d  Thus C %d x %d %f \n",gpus[0],C.m, C.n, C.beta);
    printf("GPU %d Shape %d - %d  ",gpus[0],gpus[0],gpus[ngpus-1]);	
  }
#if(COLUMN_MAJOR)						
  NN = shapes(gpus[0],gpus[ngpus-1],C.m,DEVICES, weights,sizes,indexes); 
  if (DEBUG) printf("GPU %d QUEUE CM %d \n ",gpus[0], NN);				
  QUEUEIT(1,NN,NN);							
#elif(ROW_MAJOR)							
  NN = shapes(gpus[0],gpus[ngpus-1],C.n,DEVICES, weights,sizes,indexes); 
  if (DEBUG) printf("GPU %d QUEUE RM %d \n ",gpus[0], NN);				
  QUEUEIT((NN),(1),(NN));							
#endif								
									
  if (DEBUG) {
    printf("GPU %d Partition GEMM\n",gpus[0]);
    printf("GPU %d Weights:",gpus[0]);for  (int i=0; i< DEVICES; i++) printf("%d ",weights[i]); printf("\n");
    printf("GPU %d Sizes  :",gpus[0]);for  (int i=0; i< DEVICES; i++) printf("%d ",sizes[i]); printf("\n");
    printf("GPU %d Indexes:",gpus[0]);for  (int i=0; i< DEVICES; i++) printf("%d ",indexes[i]); printf("\n");
  }
  /* Prepare OpenCL memory objects and place matrices inside them. */	

  if (NN>1) { 
    for (j=0; j<NN;j++) {
      if (DEBUG) printf("basic computation %d %d \n", j,gpus[j]);
      
      d[j].id = device[gpus[j]]; 
      d[j].queue = queue[gpus[j]];
      d[j].bufA=bufA[gpus[j]];    d[j].bufB=bufB[gpus[j]];    d[j].bufC=bufC[gpus[j]];
      
#if(COLUMN_MAJOR)
      d[j].A=A;
      d[j].B=B; d[j].B.n = sizes[gpus[j]];
      d[j].B.data=B.data+indexes[gpus[j]];
      d[j].C=C; d[j].C.n =sizes[j];  d[j].C.data= C.data+indexes[gpus[j]];
      d[j].result = 0;
#elif(ROW_MAJOR)
      d[j].A=A; d[j].A.m =sizes[gpus[j]];  d[j].A.data= A.data+indexes[gpus[j]];
      d[j].B=B; 
      d[j].C=C; d[j].C.m =sizes[gpus[j]];  d[j].C.data= C.data+indexes[gpus[j]];
      d[j].result = 0;
#endif
    }   
  } else {
    j=0;
    d[j].id = device[gpus[j]]; 
    d[j].queue = queue[gpus[j]];
    d[j].bufA=bufA[gpus[j]];    d[j].bufB=bufB[gpus[j]];    d[j].bufC=bufC[gpus[j]];
    d[j].A=A;
    d[j].B=B; 
    d[j].C=C; 
    d[j].result = 0;
  }
  
  if (DEBUG) printf("GPU %d %d basic computation %d\n",gpus[0],i,j);
  
  if (PARALLEL) {
    for (j=0; j<NN;j++) {
      thr_id[j] = pthread_create(&p_thread[j],
				 NULL, //&attr,
				 basic_mul_computation_gpugemm,
				 (void *)(&d[j]));
      if(thr_id[j]) {
	
	printf("GPU %d Error creating thread %d %d\n",gpus[0],j, thr_id[j]);
	return 1;
      }
    } 
    
    for (j = 0; j<NN; j++){						
      pthread_join(p_thread[j], NULL);					
    }									
  }
  else { // not PARALLEL
    for (j=0; j<NN;j++) 
      basic_mul_computation_gpugemm((void *)(&d[j]));
  }
  if (DEBUG) printf("GPU %d Wait and release \n ",gpus[0]);
  WAIT_AND_RELEASE;

  if (DEBUG) printf("GPU %d done\n",gpus[0]);
  return ret;
}  


// MUL
int
GEMM(DEF(C),DEF(A),DEF(B))
{
  int NN;
  C.beta = _zero;
  if (C.gpu>=0 && C.gpu<4) {
    //printf("gpu %d \n",C.gpu); 
    return TEMPLATE(C,A,B,1,&(C.gpu));
  } else
    return TEMPLATE(C,A,B,ngpus,gpus);
}

// MADD
int
GEMMA(DEF(C),DEF(A),DEF(B))
{
  int NN;  
  C.beta = _one;
  if (C.gpu>=0 && C.gpu<4)
    return TEMPLATE(C,A,B,1,&(C.gpu));
  else
    return TEMPLATE(C,A,B,ngpus,gpus);
}




int deviceName(cl_device_id *device, int ndevices) { 
  char* value;
  size_t valueSize;
  cl_uint maxComputeUnits;
  int j=0;
  
  cl_ulong buf_ulong;

  // print device name
  clGetDeviceInfo(device[j], CL_DEVICE_NAME, 0, NULL, &valueSize);
  value = (char*) malloc(valueSize);
  clGetDeviceInfo(device[j], CL_DEVICE_NAME, valueSize, value, NULL);
  printf("%d. Device: %s\n", ndevices, value);
  free(value);
  
  return 0;
}
int deviceInformation(cl_device_id *device, int ndevices) { 
  char* value;
  size_t valueSize;
  cl_uint maxComputeUnits;
  int j;
  for (j = 0; j <ndevices ; j++) {
    cl_ulong buf_ulong;

    // print device name
    clGetDeviceInfo(device[j], CL_DEVICE_NAME, 0, NULL, &valueSize);
    value = (char*) malloc(valueSize);
    clGetDeviceInfo(device[j], CL_DEVICE_NAME, valueSize, value, NULL);
    printf("%d. Device: %s\n", j, value);
    free(value);

    // print hardware device version
    clGetDeviceInfo(device[j], CL_DEVICE_VERSION, 0, NULL, &valueSize);
    value = (char*) malloc(valueSize);
    clGetDeviceInfo(device[j], CL_DEVICE_VERSION, valueSize, value, NULL);
    printf(" %d.%d Hardware version: %s\n", j, 1, value);
    free(value);
    
    // print software driver version
    clGetDeviceInfo(device[j], CL_DRIVER_VERSION, 0, NULL, &valueSize);
    value = (char*) malloc(valueSize);
    clGetDeviceInfo(device[j], CL_DRIVER_VERSION, valueSize, value, NULL);
    printf(" %d.%d Software version: %s\n", j, 2, value);
    free(value);
    
    // print c version supported by compiler for device
    clGetDeviceInfo(device[j], CL_DEVICE_OPENCL_C_VERSION, 0, NULL, &valueSize);
    value = (char*) malloc(valueSize);
    clGetDeviceInfo(device[j], CL_DEVICE_OPENCL_C_VERSION, valueSize, value, NULL);
    printf(" %d.%d OpenCL C version: %s\n", j, 3, value);
    free(value);
    
    // print parallel compute units
    clGetDeviceInfo(device[j], CL_DEVICE_MAX_COMPUTE_UNITS,
		    sizeof(maxComputeUnits), &maxComputeUnits, NULL);
    printf(" %d.%d Parallel compute units: %d\n", j, 4, maxComputeUnits);
    
    // print device memory size
    clGetDeviceInfo(device[j], CL_DEVICE_GLOBAL_MEM_SIZE,sizeof(buf_ulong), &buf_ulong, NULL);
    printf(" %d.%d Global Memory: %lu KB\n", j, 5, buf_ulong/(1024));

    // We change the buffer size so we can dynamic algorithm
    //if (ndevices>1) _sizes[j] = buf_ulong;
    
    clGetDeviceInfo(device[j], CL_DEVICE_LOCAL_MEM_SIZE,sizeof(buf_ulong), &buf_ulong, NULL);
    printf(" %d.%d Local Memory: %lu KB\n", j, 5, buf_ulong/(1024));
    
    clGetDeviceInfo(device[j], CL_DEVICE_HOST_UNIFIED_MEMORY,sizeof(buf_ulong), &buf_ulong, NULL);
    printf(" %d.%d Unified Memory: %lu\n", j, 5, buf_ulong);
    
    

    
  }
  
  return 0;
}

char *prettyPrintClStatus(cl_int status )
{
	switch( status )
	{
		case CL_INVALID_GLOBAL_WORK_SIZE:
			return "CL_INVALID_GLOBAL_WORK_SIZE";
		case CL_INVALID_MIP_LEVEL:
			return "CL_INVALID_MIP_LEVEL";
		case CL_INVALID_BUFFER_SIZE:
			return "CL_INVALID_BUFFER_SIZE";
		case CL_INVALID_GL_OBJECT:
			return "CL_INVALID_GL_OBJECT";
		case CL_INVALID_OPERATION:
			return "CL_INVALID_OPERATION";
		case CL_INVALID_EVENT:
			return "CL_INVALID_EVENT";
		case CL_INVALID_EVENT_WAIT_LIST:
			return "CL_INVALID_EVENT_WAIT_LIST";
		case CL_INVALID_GLOBAL_OFFSET:
			return "CL_INVALID_GLOBAL_OFFSET";
		case CL_INVALID_WORK_ITEM_SIZE:
			return "CL_INVALID_WORK_ITEM_SIZE";
		case CL_INVALID_WORK_GROUP_SIZE:
			return "CL_INVALID_WORK_GROUP_SIZE";
		case CL_INVALID_WORK_DIMENSION:
			return "CL_INVALID_WORK_DIMENSION";
		case CL_INVALID_KERNEL_ARGS:
			return "CL_INVALID_KERNEL_ARGS";
		case CL_INVALID_ARG_SIZE:
			return "CL_INVALID_ARG_SIZE";
		case CL_INVALID_ARG_VALUE:
			return "CL_INVALID_ARG_VALUE";
		case CL_INVALID_ARG_INDEX:
			return "CL_INVALID_ARG_INDEX";
		case CL_INVALID_KERNEL:
			return "CL_INVALID_KERNEL";
		case CL_INVALID_KERNEL_DEFINITION:
			return "CL_INVALID_KERNEL_DEFINITION";
		case CL_INVALID_KERNEL_NAME:
			return "CL_INVALID_KERNEL_NAME";
		case CL_INVALID_PROGRAM_EXECUTABLE:
			return "CL_INVALID_PROGRAM_EXECUTABLE";
		case CL_INVALID_PROGRAM:
			return "CL_INVALID_PROGRAM";
		case CL_INVALID_BUILD_OPTIONS:
			return "CL_INVALID_BUILD_OPTIONS";
		case CL_INVALID_BINARY:
			return "CL_INVALID_BINARY";
		case CL_INVALID_SAMPLER:
			return "CL_INVALID_SAMPLER";
		case CL_INVALID_IMAGE_SIZE:
			return "CL_INVALID_IMAGE_SIZE";
		case CL_INVALID_IMAGE_FORMAT_DESCRIPTOR:
			return "CL_INVALID_IMAGE_FORMAT_DESCRIPTOR";
		case CL_INVALID_MEM_OBJECT:
			return "CL_INVALID_MEM_OBJECT";
		case CL_INVALID_HOST_PTR:
			return "CL_INVALID_HOST_PTR";
		case CL_INVALID_COMMAND_QUEUE:
			return "CL_INVALID_COMMAND_QUEUE";
		case CL_INVALID_QUEUE_PROPERTIES:
			return "CL_INVALID_QUEUE_PROPERTIES";
		case CL_INVALID_CONTEXT:
			return "CL_INVALID_CONTEXT";
		case CL_INVALID_DEVICE:
			return "CL_INVALID_DEVICE";
		case CL_INVALID_PLATFORM:
			return "CL_INVALID_PLATFORM";
		case CL_INVALID_DEVICE_TYPE:
			return "CL_INVALID_DEVICE_TYPE";
		case CL_INVALID_VALUE:
			return "CL_INVALID_VALUE";
		case CL_MAP_FAILURE:
			return "CL_MAP_FAILURE";
		case CL_BUILD_PROGRAM_FAILURE:
			return "CL_BUILD_PROGRAM_FAILURE";
		case CL_IMAGE_FORMAT_NOT_SUPPORTED:
			return "CL_IMAGE_FORMAT_NOT_SUPPORTED";
		case CL_IMAGE_FORMAT_MISMATCH:
			return "CL_IMAGE_FORMAT_MISMATCH";
		case CL_MEM_COPY_OVERLAP:
			return "CL_MEM_COPY_OVERLAP";
		case CL_PROFILING_INFO_NOT_AVAILABLE:
			return "CL_PROFILING_INFO_NOT_AVAILABLE";
		case CL_OUT_OF_HOST_MEMORY:
			return "CL_OUT_OF_HOST_MEMORY";
		case CL_OUT_OF_RESOURCES:
			return "CL_OUT_OF_RESOURCES";
		case CL_MEM_OBJECT_ALLOCATION_FAILURE:
			return "CL_MEM_OBJECT_ALLOCATION_FAILURE";
		case CL_COMPILER_NOT_AVAILABLE:
			return "CL_COMPILER_NOT_AVAILABLE";
		case CL_DEVICE_NOT_AVAILABLE:
			return "CL_DEVICE_NOT_AVAILABLE";
		case CL_DEVICE_NOT_FOUND:
			return "CL_DEVICE_NOT_FOUND";
		case CL_SUCCESS:
			return "CL_SUCCESS";
		default:
			return "Error code not defined";
		break;
	}
}
void checkErrors(cl_int status, char *label, int line)
{
  switch (status)
    {
    case CL_SUCCESS:
      return;
    case CL_BUILD_PROGRAM_FAILURE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_BUILD_PROGRAM_FAILURE\n", label, line);
      break;
    case CL_COMPILER_NOT_AVAILABLE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_COMPILER_NOT_AVAILABLE\n", label, line);
      break;
      case CL_DEVICE_NOT_AVAILABLE:
        fprintf(stderr, "OpenCL error (at %s, line %d): CL_DEVICE_NOT_AVAILABLE\n", label, line);
        break;
    case CL_DEVICE_NOT_FOUND:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_DEVICE_NOT_FOUND\n", label, line);
      break;
    case CL_IMAGE_FORMAT_MISMATCH:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_IMAGE_FORMAT_MISMATCH\n", label, line);
      break;
    case CL_IMAGE_FORMAT_NOT_SUPPORTED:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_IMAGE_FORMAT_NOT_SUPPORTED\n", label, line);
      break;
    case CL_INVALID_ARG_INDEX:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_ARG_INDEX\n", label, line);
      break;
    case CL_INVALID_ARG_SIZE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_ARG_SIZE\n", label, line);
      break;
    case CL_INVALID_ARG_VALUE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_ARG_VALUE\n", label, line);
      break;
    case CL_INVALID_BINARY:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_BINARY\n", label, line);
      break;
    case CL_INVALID_BUFFER_SIZE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_BUFFER_SIZE\n", label, line);
      break;
    case CL_INVALID_BUILD_OPTIONS:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_BUILD_OPTIONS\n", label, line);
      break;
    case CL_INVALID_COMMAND_QUEUE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_COMMAND_QUEUE\n", label, line);
      break;
    case CL_INVALID_CONTEXT:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_CONTEXT\n", label, line);
      break;
    case CL_INVALID_DEVICE:
        fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_DEVICE\n", label, line);
        break;
    case CL_INVALID_DEVICE_TYPE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_DEVICE_TYPE\n", label, line);
      break;
    case CL_INVALID_EVENT:
        fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_EVENT\n", label, line);
        break;
    case CL_INVALID_EVENT_WAIT_LIST:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_EVENT_WAIT_LIST\n", label, line);
      break;
    case CL_INVALID_GL_OBJECT:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_GL_OBJECT\n", label, line);
      break;
    case CL_INVALID_GLOBAL_OFFSET:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_GLOBAL_OFFSET\n", label, line);
      break;
    case CL_INVALID_HOST_PTR:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_HOST_PTR\n", label, line);
      break;
    case CL_INVALID_IMAGE_FORMAT_DESCRIPTOR:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_IMAGE_FORMAT_DESCRIPTOR\n", label, line);
      break;
    case CL_INVALID_IMAGE_SIZE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_IMAGE_SIZE\n", label, line);
      break;
    case CL_INVALID_KERNEL_NAME:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_KERNEL_NAME\n", label, line);
      break;
    case CL_INVALID_KERNEL:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_KERNEL\n", label, line);
      break;
    case CL_INVALID_KERNEL_ARGS:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_KERNEL_ARGS\n", label, line);
        break;
    case CL_INVALID_KERNEL_DEFINITION:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_KERNEL_DEFINITION\n", label, line);
        break;
    case CL_INVALID_MEM_OBJECT:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_MEM_OBJECT\n", label, line);
      break;
    case CL_INVALID_OPERATION:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_OPERATION\n", label, line);
      break;
    case CL_INVALID_PLATFORM:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_PLATFORM\n", label, line);
      break;
    case CL_INVALID_PROGRAM:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_PROGRAM\n", label, line);
      break;
    case CL_INVALID_PROGRAM_EXECUTABLE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_PROGRAM_EXECUTABLE\n", label, line);
      break;
    case CL_INVALID_QUEUE_PROPERTIES:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_QUEUE_PROPERTIES\n", label, line);
      break;
    case CL_INVALID_SAMPLER:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_SAMPLER\n", label, line);
      break;
    case CL_INVALID_VALUE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_VALUE\n", label, line);
      break;
    case CL_INVALID_WORK_DIMENSION:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_WORK_DIMENSION\n", label, line);
      break;
    case CL_INVALID_WORK_GROUP_SIZE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_WORK_GROUP_SIZE\n", label, line);
      break;
      case CL_INVALID_WORK_ITEM_SIZE:
        fprintf(stderr, "OpenCL error (at %s, line %d): CL_INVALID_WORK_ITEM_SIZE\n", label, line);
        break;
    case CL_MAP_FAILURE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_MAP_FAILURE\n", label, line);
      break;
    case CL_MEM_OBJECT_ALLOCATION_FAILURE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_MEM_OBJECT_ALLOCATION_FAILURE\n", label, line);
      break;
    case CL_MEM_COPY_OVERLAP:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_MEM_COPY_OVERLAP\n", label, line);
      break;
    case CL_OUT_OF_HOST_MEMORY:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_OUT_OF_HOST_MEMORY\n", label, line);
      break;
    case CL_OUT_OF_RESOURCES:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_OUT_OF_RESOURCES\n", label, line);
      break;
    case CL_PROFILING_INFO_NOT_AVAILABLE:
      fprintf(stderr, "OpenCL error (at %s, line %d): CL_PROFILING_INFO_NOT_AVAILABLE\n", label, line);
      break;
    }
  exit(status);
}
