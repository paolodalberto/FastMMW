#
#  This solution is not suitable for our Solution Digester,
#  because it has a mix of a and b literls in the intermediate product factors
#

# O. M. Makarov, An algorithm for multipliying matrices
# 
# k1 b1 c1   a1 a2 a3   r1 r2 r3
# k2 b2 c2 * k4 k5 k6 = r4 r5 r6
# k3 b3 c3   k7 k8 k9   r7 r8 r9
# 
# k1 := a11;
# b1 := a12;
# c1 := a13;
# k2 := a21;
# b2 := a22;
# c2 := a23;
# k3 := a31;
# b3 := a32;
# c3 := a33;
# a1 := b11;
# a2 := b12;
# a3 := b13;
# k4 := b21;
# k5 := b22;
# k6 := b23;
# k7 := b31;
# k8 := b32;
# k9 := b33;
# 
# M1 := (a3+c1-c2)*(k1+k7-k8+k9);
# M2 := (a2+b1+b2)*(k2-k4+k5-k6);
# M3 := (a2+b1+b3)*(k3-k4+k5-k6);
# M4 := (a3-c2-c3)*(k3-k7+k8-k9);
# M5 := (a1-c1+c2)*k1;
# M6 := (a1+b1+b2)*k2;
# M7 := (a1+b1+b3+c2+c3)*k3;
# M8 := a2*(k1+k4-k5+k6);
# M9 := a3*(k2+k7-k8+k9);
# M10 := b1*k4;
# M11 := c2*k7;
# M12 := (c1-c2)*(k1+k7);
# M13 := (b1+b2)*(k4-k2);
# M14 := (a2+b1)*(k4-k5+k6);
# M15 := b2*k6;
# M16 := (a3-c2)*(k7-k8+k9);
# M17 := c2*k8;
# M18 := (b3-c2-c3)*k6;
# M19 := (c1+c3-b1-b3)*k8;
# M20 := (b1+b3)*(k4-k3+k6+k8);
# M21 := (c2+c3)*(k3+k6-k7+k8);
# M22 := (c2+c3-b1-b3)*(k6+k8);
# 
# r1 := M5+M10+M11+M12;
# r2 := M8+M10-M14+M17-M18+M19-M22;
# r3 := M1-M11-M12-M16+M17-M18+M19-M22;
# r4 := M6-M10+M11+M13;
# r5 := M2-M10+M13+M14+M15+M17;
# r6 := M9-M11+M15-M16+M17;
# r7 := M7-M10-M11+M20-M21+M22;
# r8 := M3-M10+M14-M17+M18+M20+M22;
# r9 := M4+M11+M16-M17+M18+M21;


P1 := (b13+a13-a23)*(a11+b31-b32+b33);
P2 := (b12+a12+a22)*(a21-b21+b22-b23);
P3 := (b12+a12+a32)*(a31-b21+b22-b23);
P4 := (b13-a23-a33)*(a31-b31+b32-b33);
P5 := (b11-a13+a23)*a11;
P6 := (b11+a12+a22)*a21;
P7 := (b11+a12+a32+a23+a33)*a31;
P8 := b12*(a11+b21-b22+b23);
P9 := b13*(a21+b31-b32+b33);
P10 := a12*b21;
P11 := a23*b31;
P12 := (a13-a23)*(a11+b31);
P13 := (a12+a22)*(b21-a21);
P14 := (b12+a12)*(b21-b22+b23);
P15 := a22*b23;
P16 := (b13-a23)*(b31-b32+b33);
P17 := a23*b32;
P18 := (a32-a23-a33)*b23;
P19 := (a13+a33-a12-a32)*b32;
P20 := (a12+a32)*(b21-a31+b23+b32);
P21 := (a23+a33)*(a31+b23-b31+b32);
P22 := (a23+a33-a12-a32)*(b23+b32);

c11 := P5+P10+P11+P12;
c12 := P8+P10-P14+P17-P18+P19-P22;
c13 := P1-P11-P12-P16+P17-P18+P19-P22;
c21 := P6-P10+P11+P13;
c22 := P2-P10+P13+P14+P15+P17;
c23 := P9-P11+P15-P16+P17;
c31 := P7-P10-P11+P20-P21+P22;
c32 := P3-P10+P14-P17+P18+P20+P22;
c33 := P4+P11+P16-P17+P18+P21;

Simplify(c11 - (a11*b11+a12*b21+a13*b31));
Simplify(c12 - (a11*b12+a12*b22+a13*b32));
Simplify(c13 - (a11*b13+a12*b23+a13*b33));
Simplify(c21 - (a21*b11+a22*b21+a23*b31));
Simplify(c22 - (a21*b12+a22*b22+a23*b32));
Simplify(c23 - (a21*b13+a22*b23+a23*b33));
Simplify(c31 - (a31*b11+a32*b21+a33*b31));
Simplify(c32 - (a31*b12+a32*b22+a33*b32));
Simplify(c33 - (a31*b13+a32*b23+a33*b33));
