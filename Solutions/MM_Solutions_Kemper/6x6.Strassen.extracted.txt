#
#  Extraction of matrix multiplication script

#  A multiplication procedure with one row and one column less is derived by 
#  setting the row and colum elements to 0 and leaving out all 0 products.
#
#  Intermediate products: 189
#  Add/sub operations:    1578

#  Input file:  7x7.strassen.extracted.txt
#  Output file: 6x6.Strassen.extracted.txt
#  A row cleared: 1
#  A col cleared: 1
#  B row cleared: 1
#  B col cleared: 3
#  Created:     28.12.2012 22:10

#  Verified ok!

#  189 intermediate products:
P01 := (a11+a22+a33+a44+a55+a66) * (b33+b44+b55+b66);
P02 := (a21+a22+a43+a44+a65+a66) * (b33+b55);
P03 := (a11+a33+a55) * (b34-b44+b56-b66);
P04 := (a22+a44+a66) * (-b33+b43-b55+b65);
P05 := (a11+a12+a33+a34+a55+a56) * (b44+b66);
P06 := (-a11+a21-a33+a43-a55+a65) * (b33+b34+b55+b56);
P07 := (a12-a22+a34-a44+a56-a66) * (b43+b44+b65+b66);
P08 := (a11+a22+a53+a55+a64+a66) * (b33+b44);
P09 := (a21+a22+a63+a64+a65+a66) * b33;
P10 := (a11+a53+a55) * (b34-b44);
P11 := (a22+a64+a66) * (-b33+b43);
P12 := (a11+a12+a53+a54+a55+a56) * b44;
P13 := (-a11+a21-a53-a55+a63+a65) * (b33+b34);
P14 := (a12-a22+a54+a56-a64-a66) * (b43+b44);
P15 := (a33+a44) * (b35+b46-b55-b66);
P16 := (a43+a44) * (b35-b55);
P17 := a33 * (b36-b46-b56+b66);
P18 := a44 * (-b35+b45+b55-b65);
P19 := (a33+a34) * (b46-b66);
P20 := (-a33+a43) * (b35+b36-b55-b56);
P21 := (-a34+a44) * (-b45-b46+b65+b66);
P22 := (a11+a22+a55+a66) * (b11+b22-b33-b44+b53+b64);
P23 := (a21+a22+a65+a66) * (b11-b33+b53);
P24 := (a11+a55) * (b12-b22-b34+b44+b54-b64);
P25 := (a22+a66) * (-b11+b21+b33-b43-b53+b63);
P26 := (a11+a12+a55+a56) * (b22-b44+b64);
P27 := (-a11+a21-a55+a65) * (b11+b12-b33-b34+b53+b54);
P28 := (a12-a22+a56-a66) * (b21+b22-b43-b44+b63+b64);
P29 := (a33+a35+a44+a46) * (b55+b66);
P30 := (a43+a44+a45+a46) * b55;
P31 := (a33+a35) * (b56-b66);
P32 := (a44+a46) * (-b55+b65);
P33 := (a33+a34+a35+a36) * b66;
P34 := (-a33-a35+a43+a45) * (b55+b56);
P35 := (a34+a36-a44-a46) * (b65+b66);
P36 := (-a33-a44+a53+a64) * (b33+b35+b44+b46);
P37 := (-a43-a44+a63+a64) * (b33+b35);
P38 := (-a33+a53) * (b34+b36-b44-b46);
P39 := (a44-a64) * (b33+b35-b43-b45);
P40 := (-a33-a34+a53+a54) * (b44+b46);
P41 := (a33-a43-a53+a63) * (b33+b34+b35+b36);
P42 := (-a34+a44+a54-a64) * (b43+b44+b45+b46);
P43 := (-a11-a22+a35+a46-a55-a66) * (b11+b22+b53+b55+b64+b66);
P44 := (-a21-a22+a45+a46-a65-a66) * (b11+b53+b55);
P45 := (a11-a35+a55) * (-b12+b22-b54-b56+b64+b66);
P46 := (a22-a46+a66) * (b11-b21+b53+b55-b63-b65);
P47 := (-a11-a12+a35+a36-a55-a56) * (b22+b64+b66);
P48 := (a11-a21-a35+a45+a55-a65) * (b11+b12+b53+b54+b55+b56);
P49 := (-a12+a22+a36-a46-a56+a66) * (b21+b22+b63+b64+b65+b66);
P50 := (a51+a55+a62+a66) * (b11+b22);
P51 := (a61+a62+a65+a66) * b11;
P52 := (a51+a55) * (b12-b22);
P53 := (a62+a66) * (-b11+b21);
P54 := (a51+a52+a55+a56) * b22;
P55 := (-a51-a55+a61+a65) * (b11+b12);
P56 := (a52+a56-a62-a66) * (b21+b22);
P57 := (a31+a35+a42+a46-a51-a55-a62-a66) * (b11+b22);
P58 := (a41+a42+a45+a46-a61-a62-a65-a66) * b11;
P59 := (a31+a35-a51-a55) * (b12-b22);
P60 := (a42+a46-a62-a66) * (-b11+b21);
P61 := (a31+a32+a35+a36-a51-a52-a55-a56) * b22;
P62 := (-a31-a35+a41+a45+a51+a55-a61-a65) * (b11+b12);
P63 := (a32+a36-a42-a46-a52-a56+a62+a66) * (b21+b22);
P64 := (a11+a22) * (b15+b26-b33-b44-b55-b66);
P65 := (a21+a22) * (b15-b33-b55);
P66 := a11 * (b16-b26-b34+b44-b56+b66);
P67 := a22 * (-b15+b25+b33-b43+b55-b65);
P68 := (a11+a12) * (b26-b44-b66);
P69 := (a11-a21) * (-b15-b16+b33+b34+b55+b56);
P70 := (-a12+a22) * (-b25-b26+b43+b44+b65+b66);
P71 := (a11+a22) * (-b33-b44);
P72 := (a21+a22) * (-b33);
P73 := a11 * (-b34+b44);
P74 := a22 * (b33-b43);
P75 := (a11+a12) * (-b44);
P76 := (a11-a21) * (b33+b34);
P77 := (-a12+a22) * (b43+b44);
P78 := (a11+a22) * (b13+b24+b33+b44-b53-b64);
P79 := (a21+a22) * (b13+b33-b53);
P80 := a11 * (b14-b24+b34-b44-b54+b64);
P81 := a22 * (-b13+b23-b33+b43+b53-b63);
P82 := (a11+a12) * (b24+b44-b64);
P83 := (-a11+a21) * (b13+b14+b33+b34-b53-b54);
P84 := (a12-a22) * (b23+b24+b43+b44-b63-b64);
P85 := (a11+a22) * (-b13-b15-b24-b26+b53+b55+b64+b66);
P86 := (a21+a22) * (-b13-b15+b53+b55);
P87 := a11 * (-b14-b16+b24+b26+b54+b56-b64-b66);
P88 := a22 * (b13+b15-b23-b25-b53-b55+b63+b65);
P89 := (a11+a12) * (-b24-b26+b64+b66);
P90 := (a11-a21) * (b13+b14+b15+b16-b53-b54-b55-b56);
P91 := (a12-a22) * (-b23-b24-b25-b26+b63+b64+b65+b66);
P92 := (a33+a44+a55+a66) * (b31+b42);
P93 := (a43+a44+a65+a66) * b31;
P94 := (a33+a55) * (b32-b42);
P95 := (a44+a66) * (-b31+b41);
P96 := (a33+a34+a55+a56) * b42;
P97 := (-a33+a43-a55+a65) * (b31+b32);
P98 := (a34-a44+a56-a66) * (b41+b42);
P99 := (a53+a55+a64+a66) * (b31+b42);
P100 := (a63+a64+a65+a66) * b31;
P101 := (a53+a55) * (b32-b42);
P102 := (a64+a66) * (-b31+b41);
P103 := (a53+a54+a55+a56) * b42;
P104 := (-a53-a55+a63+a65) * (b31+b32);
P105 := (a54+a56-a64-a66) * (b41+b42);
P106 := (a55+a66) * (-b11-b22-b31-b42+b51+b62);
P107 := (a65+a66) * (-b11-b31+b51);
P108 := a55 * (-b12+b22-b32+b42+b52-b62);
P109 := a66 * (b11-b21+b31-b41-b51+b61);
P110 := (a55+a56) * (-b22-b42+b62);
P111 := (a55-a65) * (b11+b12+b31+b32-b51-b52);
P112 := (-a56+a66) * (b21+b22+b41+b42-b61-b62);
P113 := (a35+a46-a55-a66) * (-b11-b22+b51+b62);
P114 := (a45+a46-a65-a66) * (-b11+b51);
P115 := (a35-a55) * (-b12+b22+b52-b62);
P116 := (a46-a66) * (b11-b21-b51+b61);
P117 := (a35+a36-a55-a56) * (-b22+b62);
P118 := (-a35+a45+a55-a65) * (-b11-b12+b51+b52);
P119 := (a36-a46-a56+a66) * (-b21-b22+b61+b62);
P120 := (a11+a15+a22+a26) * (b33+b44+b55+b66);
P121 := (a21+a22+a25+a26) * (b33+b55);
P122 := (a11+a15) * (b34-b44+b56-b66);
P123 := (a22+a26) * (-b33+b43-b55+b65);
P124 := (a11+a12+a15+a16) * (b44+b66);
P125 := (-a11-a15+a21+a25) * (b33+b34+b55+b56);
P126 := (a12+a16-a22-a26) * (b43+b44+b65+b66);
P127 := (a11+a13+a15+a22+a24+a26) * (b33+b44);
P128 := (a21+a22+a23+a24+a25+a26) * b33;
P129 := (a11+a13+a15) * (b34-b44);
P130 := (a22+a24+a26) * (-b33+b43);
P131 := (a11+a12+a13+a14+a15+a16) * b44;
P132 := (-a11-a13-a15+a21+a23+a25) * (b33+b34);
P133 := (a12+a14+a16-a22-a24-a26) * (b43+b44);
P134 := (a11+a15+a22+a26) * (-b33-b44+b53+b64);
P135 := (a21+a22+a25+a26) * (-b33+b53);
P136 := (a11+a15) * (-b34+b44+b54-b64);
P137 := (a22+a26) * (b33-b43-b53+b63);
P138 := (a11+a12+a15+a16) * (-b44+b64);
P139 := (-a11-a15+a21+a25) * (-b33-b34+b53+b54);
P140 := (a12+a16-a22-a26) * (-b43-b44+b63+b64);
P141 := (a13+a24) * (b33+b35+b44+b46);
P142 := (a23+a24) * (b33+b35);
P143 := a13 * (b34+b36-b44-b46);
P144 := a24 * (-b33-b35+b43+b45);
P145 := (a13+a14) * (b44+b46);
P146 := (-a13+a23) * (b33+b34+b35+b36);
P147 := (a14-a24) * (b43+b44+b45+b46);
P148 := (-a11-a22+a51+a62) * (b15+b26);
P149 := (-a21-a22+a61+a62) * b15;
P150 := (-a11+a51) * (b16-b26);
P151 := (a22-a62) * (b15-b25);
P152 := (-a11-a12+a51+a52) * b26;
P153 := (a11-a21-a51+a61) * (b15+b16);
P154 := (-a12+a22+a52-a62) * (b25+b26);
P155 := (-a11-a22+a51+a62) * (b11+b13+b22+b24);
P156 := (-a21-a22+a61+a62) * (b11+b13);
P157 := (a11-a51) * (-b12-b14+b22+b24);
P158 := (-a22+a62) * (-b11-b13+b21+b23);
P159 := (-a11-a12+a51+a52) * (b22+b24);
P160 := (a11-a21-a51+a61) * (b11+b12+b13+b14);
P161 := (-a12+a22+a52-a62) * (b21+b22+b23+b24);
P162 := (a31+a42) * (b15+b26);
P163 := (a41+a42) * b15;
P164 := a31 * (b16-b26);
P165 := a42 * (-b15+b25);
P166 := (a31+a32) * b26;
P167 := (-a31+a41) * (b15+b16);
P168 := (a32-a42) * (b25+b26);
P169 := (a11+a22+a31+a42-a51-a62) * (b11+b13+b15+b22+b24+b26);
P170 := (a21+a22+a41+a42-a61-a62) * (b11+b13+b15);
P171 := (a11+a31-a51) * (b12+b14+b16-b22-b24-b26);
P172 := (a22+a42-a62) * (-b11-b13-b15+b21+b23+b25);
P173 := (a11+a12+a31+a32-a51-a52) * (b22+b24+b26);
P174 := (-a11+a21-a31+a41+a51-a61) * (b11+b12+b13+b14+b15+b16);
P175 := (a12-a22+a32-a42-a52+a62) * (b21+b22+b23+b24+b25+b26);
P176 := (a13+a15+a24+a26-a53-a55-a64-a66) * (b31+b33+b42+b44);
P177 := (a23+a24+a25+a26-a63-a64-a65-a66) * (b31+b33);
P178 := (a13+a15-a53-a55) * (b32+b34-b42-b44);
P179 := (a24+a26-a64-a66) * (-b31-b33+b41+b43);
P180 := (a13+a14+a15+a16-a53-a54-a55-a56) * (b42+b44);
P181 := (-a13-a15+a23+a25+a53+a55-a63-a65) * (b31+b32+b33+b34);
P182 := (a14+a16-a24-a26-a54-a56+a64+a66) * (b41+b42+b43+b44);
P183 := (a15+a26-a55-a66) * (-b31-b33-b42-b44+b51+b53+b62+b64);
P184 := (a25+a26-a65-a66) * (-b31-b33+b51+b53);
P185 := (a15-a55) * (-b32-b34+b42+b44+b52+b54-b62-b64);
P186 := (a26-a66) * (b31+b33-b41-b43-b51-b53+b61+b63);
P187 := (a15+a16-a55-a56) * (-b42-b44+b62+b64);
P188 := (-a15+a25+a55-a65) * (-b31-b32-b33-b34+b51+b52+b53+b54);
P189 := (a16-a26-a56+a66) * (-b41-b42-b43-b44+b61+b62+b63+b64);

#  Elements of target matrix C[] as sums of products:
c11 := P08 + P11 - P12 + P99 + P14 + P102 - P103 + P105 + P106 + P109 - P110 + P112 - P127 - P130 + P131 - P133 - P134 - P137 + P138 - P140 + P22 + P25 - P26 + P176 + P179 - P180 + P182 + P183 + P186 - P187 + P28 + P189;
c12 := P10 + P12 + P101 + P103 + P108 + P110 - P129 - P131 - P136 - P138 + P24 + P26 + P178 + P180 + P185 + P187;
c13 := P74 - P75 + P77 + P78 + P81 - P82 + P84 + P127 + P130 - P131 + P133 + P134 + P137 - P138 + P140 + P71;
c14 := P75 + P80 + P82 + P129 + P131 + P136 + P138 + P73;
c15 :=  - P74 + P75 - P77 + P120 + P123 - P124 + P126 - P127 - P130 + P131 - P133 + P141 + P144 - P145 + P147 + P64 + P67 - P68 + P70 - P71;
c16 :=  - P75 + P122 + P124 - P129 - P131 + P143 + P145 + P66 + P68 - P73;
c21 := P09 + P11 + P100 + P102 + P107 + P109 - P128 - P130 - P135 - P137 + P23 + P25 + P177 + P179 + P184 + P186;
c22 := P08 - P09 + P10 + P13 + P99 - P100 + P101 + P104 + P106 - P107 + P108 + P111 - P127 + P128 - P129 - P132 - P134 + P135 - P136 - P139 + P22 - P23 + P24 + P176 - P177 + P178 + P181 + P27 + P183 - P184 + P185 + P188;
c23 := P74 + P79 + P81 + P128 + P130 + P135 + P137 + P72;
c24 := P76 + P78 - P79 + P80 + P83 + P127 - P128 + P129 + P132 + P134 - P135 + P136 + P139 + P71 - P72 + P73;
c25 :=  - P74 + P121 + P123 - P128 - P130 + P142 + P144 + P65 + P67 - P72;
c26 :=  - P76 + P120 - P121 + P122 + P125 - P127 + P128 - P129 - P132 + P141 - P142 + P143 + P146 + P64 - P65 + P66 + P69 - P71 + P72 - P73;
c31 := P92 + P95 - P96 + P98 + P106 + P109 - P110 + P112 + P113 + P116 - P117 + P119 + P50 + P53 - P54 + P56 + P57 + P60 - P61 + P63;
c32 := P94 + P96 + P108 + P110 + P115 + P117 + P52 + P54 + P59 + P61;
c33 := P01 + P04 - P05 + P07 + P78 + P81 - P82 + P84 + P85 + P88 - P89 + P91 + P148 + P151 - P152 + P22 + P154 + P155 + P158 - P159 + P161 - P162 - P165 + P166 - P168 + P169 + P25 + P172 - P173 + P175 - P26 + P28 - P29 - P32 + P33 - P35 + P43 + P46 - P47 + P49 - P50 - P53 + P54 - P56 - P57 - P60 + P61 - P63 + P64 + P67 - P68 + P70;
c34 := P03 + P05 + P80 + P82 + P87 + P89 + P150 + P152 + P157 + P159 + P24 - P164 - P166 + P171 + P173 + P26 - P31 - P33 + P45 + P47 - P52 - P54 - P59 - P61 + P66 + P68;
c35 := P15 + P18 - P19 + P21 + P162 + P165 - P166 + P168 + P29 + P32 - P33 + P35;
c36 := P17 + P19 + P164 + P166 + P31 + P33;
c41 := P93 + P95 + P107 + P109 + P114 + P116 + P51 + P53 + P58 + P60;
c42 := P92 - P93 + P94 + P97 + P106 - P107 + P108 + P111 + P113 - P114 + P115 + P118 + P50 - P51 + P52 + P55 + P57 - P58 + P59 + P62;
c43 := P02 + P04 + P79 + P81 + P86 + P88 + P149 + P151 + P23 + P156 + P158 - P163 - P165 + P25 + P170 + P172 - P30 - P32 + P44 + P46 - P51 - P53 - P58 - P60 + P65 + P67;
c44 := P01 - P02 + P03 + P06 + P78 - P79 + P80 + P83 + P85 - P86 + P87 + P90 + P148 - P149 + P150 + P153 + P22 - P23 + P155 - P156 + P157 + P160 - P162 + P163 + P24 - P164 - P167 + P169 - P170 + P171 + P174 + P27 - P29 + P30 - P31 - P34 + P43 - P44 + P45 + P48 - P50 + P51 - P52 - P55 - P57 + P58 - P59 - P62 + P64 - P65 + P66 + P69;
c45 := P16 + P18 + P163 + P165 + P30 + P32;
c46 := P15 - P16 + P17 + P20 + P162 - P163 + P164 + P167 + P29 - P30 + P31 + P34;
c51 := P99 + P102 - P103 + P105 + P106 + P109 - P110 + P112 + P50 + P53 - P54 + P56;
c52 := P101 + P103 + P108 + P110 + P52 + P54;
c53 := P08 + P74 - P75 + P77 + P78 + P81 + P11 - P82 + P84 - P12 + P14 + P22 + P155 + P158 - P159 + P161 + P25 - P26 + P28 - P50 - P53 + P54 - P56 + P71;
c54 := P10 + P75 + P80 + P82 + P12 + P157 + P159 + P24 + P26 - P52 - P54 + P73;
c55 := P01 + P04 - P05 + P07 - P08 - P74 + P75 - P77 - P11 + P12 - P14 + P15 + P18 - P19 + P21 + P148 + P151 - P152 + P154 + P36 + P39 - P40 + P42 + P64 + P67 - P68 + P70 - P71;
c56 := P03 + P05 - P10 - P75 - P12 + P17 + P19 + P150 + P152 + P38 + P40 + P66 + P68 - P73;
c61 := P100 + P102 + P107 + P109 + P51 + P53;
c62 := P99 - P100 + P101 + P104 + P106 - P107 + P108 + P111 + P50 - P51 + P52 + P55;
c63 := P09 + P74 + P79 + P81 + P11 + P23 + P156 + P158 + P25 - P51 - P53 + P72;
c64 := P08 - P09 + P10 + P76 + P78 - P79 + P80 + P83 + P13 + P22 - P23 + P155 - P156 + P157 + P160 + P24 + P27 - P50 + P51 - P52 - P55 + P71 - P72 + P73;
c65 := P02 + P04 - P09 - P74 - P11 + P16 + P18 + P149 + P151 + P37 + P39 + P65 + P67 - P72;
c66 := P01 - P02 + P03 + P06 - P08 + P09 - P10 - P76 - P13 + P15 - P16 + P17 + P20 + P148 - P149 + P150 + P153 + P36 - P37 + P38 + P41 + P64 - P65 + P66 + P69 - P71 + P72 - P73;

#  Yacas validation expressions should result in 0:
Simplify(c11 - (a11*b11+a12*b21+a13*b31+a14*b41+a15*b51+a16*b61));
Simplify(c12 - (a11*b12+a12*b22+a13*b32+a14*b42+a15*b52+a16*b62));
Simplify(c13 - (a11*b13+a12*b23+a13*b33+a14*b43+a15*b53+a16*b63));
Simplify(c14 - (a11*b14+a12*b24+a13*b34+a14*b44+a15*b54+a16*b64));
Simplify(c15 - (a11*b15+a12*b25+a13*b35+a14*b45+a15*b55+a16*b65));
Simplify(c16 - (a11*b16+a12*b26+a13*b36+a14*b46+a15*b56+a16*b66));
Simplify(c21 - (a21*b11+a22*b21+a23*b31+a24*b41+a25*b51+a26*b61));
Simplify(c22 - (a21*b12+a22*b22+a23*b32+a24*b42+a25*b52+a26*b62));
Simplify(c23 - (a21*b13+a22*b23+a23*b33+a24*b43+a25*b53+a26*b63));
Simplify(c24 - (a21*b14+a22*b24+a23*b34+a24*b44+a25*b54+a26*b64));
Simplify(c25 - (a21*b15+a22*b25+a23*b35+a24*b45+a25*b55+a26*b65));
Simplify(c26 - (a21*b16+a22*b26+a23*b36+a24*b46+a25*b56+a26*b66));
Simplify(c31 - (a31*b11+a32*b21+a33*b31+a34*b41+a35*b51+a36*b61));
Simplify(c32 - (a31*b12+a32*b22+a33*b32+a34*b42+a35*b52+a36*b62));
Simplify(c33 - (a31*b13+a32*b23+a33*b33+a34*b43+a35*b53+a36*b63));
Simplify(c34 - (a31*b14+a32*b24+a33*b34+a34*b44+a35*b54+a36*b64));
Simplify(c35 - (a31*b15+a32*b25+a33*b35+a34*b45+a35*b55+a36*b65));
Simplify(c36 - (a31*b16+a32*b26+a33*b36+a34*b46+a35*b56+a36*b66));
Simplify(c41 - (a41*b11+a42*b21+a43*b31+a44*b41+a45*b51+a46*b61));
Simplify(c42 - (a41*b12+a42*b22+a43*b32+a44*b42+a45*b52+a46*b62));
Simplify(c43 - (a41*b13+a42*b23+a43*b33+a44*b43+a45*b53+a46*b63));
Simplify(c44 - (a41*b14+a42*b24+a43*b34+a44*b44+a45*b54+a46*b64));
Simplify(c45 - (a41*b15+a42*b25+a43*b35+a44*b45+a45*b55+a46*b65));
Simplify(c46 - (a41*b16+a42*b26+a43*b36+a44*b46+a45*b56+a46*b66));
Simplify(c51 - (a51*b11+a52*b21+a53*b31+a54*b41+a55*b51+a56*b61));
Simplify(c52 - (a51*b12+a52*b22+a53*b32+a54*b42+a55*b52+a56*b62));
Simplify(c53 - (a51*b13+a52*b23+a53*b33+a54*b43+a55*b53+a56*b63));
Simplify(c54 - (a51*b14+a52*b24+a53*b34+a54*b44+a55*b54+a56*b64));
Simplify(c55 - (a51*b15+a52*b25+a53*b35+a54*b45+a55*b55+a56*b65));
Simplify(c56 - (a51*b16+a52*b26+a53*b36+a54*b46+a55*b56+a56*b66));
Simplify(c61 - (a61*b11+a62*b21+a63*b31+a64*b41+a65*b51+a66*b61));
Simplify(c62 - (a61*b12+a62*b22+a63*b32+a64*b42+a65*b52+a66*b62));
Simplify(c63 - (a61*b13+a62*b23+a63*b33+a64*b43+a65*b53+a66*b63));
Simplify(c64 - (a61*b14+a62*b24+a63*b34+a64*b44+a65*b54+a66*b64));
Simplify(c65 - (a61*b15+a62*b25+a63*b35+a64*b45+a65*b55+a66*b65));
Simplify(c66 - (a61*b16+a62*b26+a63*b36+a64*b46+a65*b56+a66*b66));

#  End of file 6x6.Strassen.extracted.txt

