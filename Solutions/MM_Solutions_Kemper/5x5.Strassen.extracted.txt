#
#  Extraction of matrix multiplication script

#  A multiplication procedure with one row and one column less is derived by 
#  setting the row and colum elements to 0 and leaving out all 0 products.
#
#  Intermediate products: 117
#  Add/sub operations:    735

#  Input file:  6x6.strassen.extracted.txt
#  Output file: 5x5.Strassen.extracted.txt
#  A row cleared: 1
#  A col cleared: 2
#  B row cleared: 2
#  B col cleared: 1
#  Created:     28.12.2012 22:13

#  Verified ok!

#  117 intermediate products:
P01 := (a22+a33+a44+a55) * (b22+b33+b44+b55);
P02 := (a11+a32+a33+a54+a55) * (b22+b44);
P03 := (a22+a44) * (b23-b33+b45-b55);
P04 := (a33+a55) * (-b22+b32-b44+b54);
P05 := (a22+a23+a44+a45) * (b33+b55);
P06 := (a11-a22+a32-a44+a54) * (b22+b23+b44+b45);
P07 := (a23-a33+a45-a55) * (b32+b33+b54+b55);
P08 := (a42+a44+a53+a55) * (b22+b33);
P09 := (a11+a52+a53+a54+a55) * b22;
P10 := (a42+a44) * (b23-b33);
P11 := (a53+a55) * (-b22+b32);
P12 := (a42+a43+a44+a45) * b33;
P13 := (a11-a42-a44+a52+a54) * (b22+b23);
P14 := (a43+a45-a53-a55) * (b32+b33);
P15 := (a22+a33) * (b24+b35-b44-b55);
P16 := (a32+a33) * (b24-b44);
P17 := a22 * (b25-b35-b45+b55);
P18 := a33 * (-b24+b34+b44-b54);
P19 := (a22+a23) * (b35-b55);
P20 := (-a22+a32) * (b24+b25-b44-b45);
P21 := (-a23+a33) * (-b34-b35+b54+b55);
P22 := (a44+a55) * (-b22-b33+b42+b53);
P23 := (a11+a54+a55) * (-b22+b42);
P24 := a44 * (b11-b23+b33+b43-b53);
P25 := a55 * (b22-b32-b42+b52);
P26 := (a44+a45) * (-b33+b53);
P27 := (a11-a44+a54) * (b11-b22-b23+b42+b43);
P28 := (a45-a55) * (-b32-b33+b52+b53);
P29 := (a22+a24+a33+a35) * (b44+b55);
P30 := (a32+a33+a34+a35) * b44;
P31 := (a22+a24) * (b45-b55);
P32 := (a33+a35) * (-b44+b54);
P33 := (a22+a23+a24+a25) * b55;
P34 := (-a22-a24+a32+a34) * (b44+b45);
P35 := (a23+a25-a33-a35) * (b54+b55);
P36 := (-a22-a33+a42+a53) * (b22+b24+b33+b35);
P37 := (-a32-a33+a52+a53) * (b22+b24);
P38 := (-a22+a42) * (b23+b25-b33-b35);
P39 := (a33-a53) * (b22+b24-b32-b34);
P40 := (-a22-a23+a42+a43) * (b33+b35);
P41 := (a22-a32-a42+a52) * (b22+b23+b24+b25);
P42 := (-a23+a33+a43-a53) * (b32+b33+b34+b35);
P43 := (a24+a35-a44-a55) * (b42+b44+b53+b55);
P44 := (-a11+a34+a35-a54-a55) * (b42+b44);
P45 := (a24-a44) * (b11+b43+b45-b53-b55);
P46 := (-a35+a55) * (b42+b44-b52-b54);
P47 := (a24+a25-a44-a45) * (b53+b55);
P48 := (-a11-a24+a34+a44-a54) * (b11+b42+b43+b44+b45);
P49 := (a25-a35-a45+a55) * (b52+b53+b54+b55);
P50 := (a41+a44) * b11;
P51 := (-a41-a44+a51+a54) * b11;
P52 := (a21+a24-a41-a44) * b11;
P53 := (-a21-a24+a31+a34+a41+a44-a51-a54) * b11;
P54 := a11 * (b14-b22-b44);
P55 := (-a11) * (-b14-b15+b22+b23+b44+b45);
P56 := a11 * (-b22);
P57 := (-a11) * (b22+b23);
P58 := a11 * (b12+b22-b42);
P59 := a11 * (b12+b13+b22+b23-b42-b43);
P60 := a11 * (-b12-b14+b42+b44);
P61 := a11 * (-b12-b13-b14-b15+b42+b43+b44+b45);
P62 := (a22+a33+a44+a55) * b31;
P63 := (a22+a44) * (b21-b31);
P64 := (a22+a23+a44+a45) * b31;
P65 := (-a22+a32-a44+a54) * b21;
P66 := (a42+a44+a53+a55) * b31;
P67 := (a42+a44) * (b21-b31);
P68 := (a42+a43+a44+a45) * b31;
P69 := (-a42-a44+a52+a54) * b21;
P70 := (a44+a55) * (-b31+b51);
P71 := a44 * (-b11-b21+b31+b41-b51);
P72 := (a44+a45) * (-b31+b51);
P73 := (a44-a54) * (b11+b21-b41);
P74 := (a24+a35-a44-a55) * b51;
P75 := (-a24+a44) * (b11-b41+b51);
P76 := (a24+a25-a44-a45) * b51;
P77 := (-a24+a34+a44-a54) * (-b11+b41);
P78 := a15 * (b22+b33+b44+b55);
P79 := (a11+a14+a15) * (b22+b44);
P80 := a15 * (-b22+b32-b44+b54);
P81 := (a11+a14) * (b22+b23+b44+b45);
P82 := (a13+a15) * (b22+b33);
P83 := (a11+a12+a13+a14+a15) * b22;
P84 := (a13+a15) * (-b22+b32);
P85 := (a11+a12+a14) * (b22+b23);
P86 := a15 * (-b22-b33+b42+b53);
P87 := (a11+a14+a15) * (-b22+b42);
P88 := a15 * (b22-b32-b42+b52);
P89 := (a11+a14) * (-b22-b23+b42+b43);
P90 := a13 * (b22+b24+b33+b35);
P91 := (a12+a13) * (b22+b24);
P92 := a13 * (-b22-b24+b32+b34);
P93 := a12 * (b22+b23+b24+b25);
P94 := a41 * b14;
P95 := (-a11+a51) * b14;
P96 := a41 * b15;
P97 := (-a11-a41+a51) * (b14+b15);
P98 := a41 * b12;
P99 := (-a11+a51) * b12;
P100 := a41 * (b11+b13);
P101 := (-a11-a41+a51) * (b11+b12+b13);
P102 := a21 * b14;
P103 := a31 * b14;
P104 := a21 * b15;
P105 := (-a21+a31) * (b14+b15);
P106 := (a21-a41) * (b12+b14);
P107 := (a11+a31-a51) * (b12+b14);
P108 := (a21-a41) * (b11+b13+b15);
P109 := (a11-a21+a31+a41-a51) * (b11+b12+b13+b14+b15);
P110 := (a13+a15-a42-a44-a53-a55) * (b22+b31+b33);
P111 := (-a12-a13-a14-a15+a52+a53+a54+a55) * b22;
P112 := (a42+a44) * (-b21-b23+b31+b33);
P113 := (a12+a14+a42+a44-a52-a54) * (b21+b22+b23);
P114 := (-a15+a44+a55) * (b22+b31+b33-b42-b51-b53);
P115 := (a14+a15-a54-a55) * (b22-b42);
P116 := a44 * (b21+b23-b31-b33-b41-b43+b51+b53);
P117 := (a14+a44-a54) * (-b21-b22-b23+b41+b42+b43);

#  Elements of target matrix C[] as sums of products:
c11 := P08 - P09 + P10 + P67 + P69 + P70 + P71 + P73 - P82 + P83 + P13 - P85 - P86 + P87 - P89 + P110 + P111 + P112 + P113 + P114 + P115 + P116 + P117 + P22 - P23 + P24 + P27 + P66;
c12 := P83 + P84 + P87 + P88 + P56 + P58;
c13 := P82 - P83 + P85 + P86 - P87 + P89 - P56 + P57 - P58 + P59;
c14 := P79 + P80 - P83 - P84 + P91 + P92 + P54 - P56;
c15 := P78 - P79 + P81 - P82 + P83 - P85 + P90 - P91 + P93 - P54 + P55 + P56 - P57;
c21 := P71 + P72 + P75 + P76 + P50 + P52 + P63 + P64;
c22 := P01 + P04 - P05 + P07 + P94 + P98 - P102 + P106 + P22 + P25 - P26 + P28 - P29 - P32 + P33 - P35 + P43 + P46 - P47 + P49;
c23 := P03 + P05 + P96 + P100 - P104 + P108 + P24 + P26 - P31 - P33 + P45 + P47 - P50 - P52;
c24 := P15 + P102 + P18 - P19 + P21 + P29 + P32 - P33 + P35;
c25 := P104 + P17 + P19 + P31 + P33;
c31 := P70 + P71 + P73 + P74 + P75 + P77 + P50 + P51 + P52 + P53 + P62 + P63 + P65;
c32 := P02 + P04 + P95 + P99 - P103 + P107 + P23 + P25 - P30 - P32 + P44 + P46 + P54 + P58 + P60;
c33 := P01 - P02 + P03 + P06 + P94 - P95 + P96 + P97 + P98 - P99 + P100 + P101 - P102 + P103 - P104 - P105 + P106 - P107 + P108 + P109 + P22 - P23 + P24 + P27 - P29 + P30 - P31 - P34 + P43 - P44 + P45 + P48 - P50 - P51 - P52 - P53 - P54 + P55 - P58 + P59 - P60 + P61;
c34 := P16 + P103 + P18 + P30 + P32;
c35 := P15 - P16 + P102 - P103 + P104 + P105 + P17 + P20 + P29 - P30 + P31 + P34;
c41 := P67 + P68 + P71 + P72 + P50;
c42 := P08 + P11 - P12 + P14 + P98 + P22 + P25 - P26 + P28;
c43 := P10 + P12 + P100 + P24 + P26 - P50;
c44 := P01 + P04 - P05 + P07 - P08 - P11 + P12 - P14 + P94 + P15 + P18 - P19 + P21 + P36 + P39 - P40 + P42;
c45 := P03 + P05 - P10 - P12 + P96 + P17 + P19 + P38 + P40;
c51 := P67 + P69 + P70 + P71 + P73 + P50 + P51 + P66;
c52 := P09 + P11 + P99 + P23 + P25 + P56 + P58;
c53 := P08 - P09 + P10 + P13 + P98 - P99 + P100 + P101 + P22 - P23 + P24 + P27 - P50 - P51 - P56 + P57 - P58 + P59;
c54 := P02 + P04 - P09 - P11 + P95 + P16 + P18 + P37 + P39 + P54 - P56;
c55 := P01 - P02 + P03 + P06 - P08 + P09 - P10 - P13 + P94 - P95 + P15 + P96 + P97 - P16 + P17 + P20 + P36 - P37 + P38 + P41 - P54 + P55 + P56 - P57;

#  Yacas validation expressions should result in 0:
Simplify(c11 - (a11*b11+a12*b21+a13*b31+a14*b41+a15*b51));
Simplify(c12 - (a11*b12+a12*b22+a13*b32+a14*b42+a15*b52));
Simplify(c13 - (a11*b13+a12*b23+a13*b33+a14*b43+a15*b53));
Simplify(c14 - (a11*b14+a12*b24+a13*b34+a14*b44+a15*b54));
Simplify(c15 - (a11*b15+a12*b25+a13*b35+a14*b45+a15*b55));
Simplify(c21 - (a21*b11+a22*b21+a23*b31+a24*b41+a25*b51));
Simplify(c22 - (a21*b12+a22*b22+a23*b32+a24*b42+a25*b52));
Simplify(c23 - (a21*b13+a22*b23+a23*b33+a24*b43+a25*b53));
Simplify(c24 - (a21*b14+a22*b24+a23*b34+a24*b44+a25*b54));
Simplify(c25 - (a21*b15+a22*b25+a23*b35+a24*b45+a25*b55));
Simplify(c31 - (a31*b11+a32*b21+a33*b31+a34*b41+a35*b51));
Simplify(c32 - (a31*b12+a32*b22+a33*b32+a34*b42+a35*b52));
Simplify(c33 - (a31*b13+a32*b23+a33*b33+a34*b43+a35*b53));
Simplify(c34 - (a31*b14+a32*b24+a33*b34+a34*b44+a35*b54));
Simplify(c35 - (a31*b15+a32*b25+a33*b35+a34*b45+a35*b55));
Simplify(c41 - (a41*b11+a42*b21+a43*b31+a44*b41+a45*b51));
Simplify(c42 - (a41*b12+a42*b22+a43*b32+a44*b42+a45*b52));
Simplify(c43 - (a41*b13+a42*b23+a43*b33+a44*b43+a45*b53));
Simplify(c44 - (a41*b14+a42*b24+a43*b34+a44*b44+a45*b54));
Simplify(c45 - (a41*b15+a42*b25+a43*b35+a44*b45+a45*b55));
Simplify(c51 - (a51*b11+a52*b21+a53*b31+a54*b41+a55*b51));
Simplify(c52 - (a51*b12+a52*b22+a53*b32+a54*b42+a55*b52));
Simplify(c53 - (a51*b13+a52*b23+a53*b33+a54*b43+a55*b53));
Simplify(c54 - (a51*b14+a52*b24+a53*b34+a54*b44+a55*b54));
Simplify(c55 - (a51*b15+a52*b25+a53*b35+a54*b45+a55*b55));

#  End of file 5x5.Strassen.extracted.txt

